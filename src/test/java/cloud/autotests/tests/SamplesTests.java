package cloud.autotests.tests;

import cloud.autotests.helpers.DriverUtils;
import com.codeborne.selenide.Condition;
import com.codeborne.selenide.SelenideElement;
import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static com.codeborne.selenide.Selenide.*;
import static com.codeborne.selenide.WebDriverRunner.url;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;


public class SamplesTests extends TestBase {

    final static String BASE_URL = "https://rtmis.ru/";

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Menu content check")
    void generatedTest1() {

        SelenideElement menu_selector = $(".mobile-panel-body");

        step("Open " + BASE_URL, () -> {
            open(BASE_URL);
        });

        step("Menu content check", () -> {
            menu_selector.shouldHave(Condition.text("Пациенту"));
            menu_selector.shouldHave(Condition.text("Врачу"));
            menu_selector.shouldHave(Condition.text("Государству"));
            menu_selector.shouldHave(Condition.text("Компания"));
            menu_selector.shouldHave(Condition.text("Карьера"));
        });
    }

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Redirect to the main page when clicking on the logo")
    void generatedTest2() {
        step("Open page " + BASE_URL + "pacientu/servisy-k-vrachu/", () -> {
            open(BASE_URL + "pacientu/servisy-k-vrachu/");
        });

        step("Click on the logo", () -> {
            $(".logo").click();
        });

        step("Is the main page opened", () -> {
            String url = url();
            assertThat(url).isEqualTo(BASE_URL);
        });
    }

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Check language changing")
    void generatedTest3() {
        SelenideElement languageSelector = $(".lang-select");

        step("Open " + BASE_URL, () -> {
            open(BASE_URL);
        });

        step("Check the text of Eng button", () -> {
            languageSelector.shouldHave(Condition.text("EN"));
        });

        step("Click on Eng button", () -> {
            languageSelector.click();
        });

        step("Is Eng page opened", () -> {
            String url = url();
            assertThat(url).isEqualTo(BASE_URL + "en/glavnaya/");
        });

        step("Check the text of RU button", () -> {
            languageSelector.shouldHave(Condition.text("RU"));
        });

        step("Click on RU button", () -> {
            languageSelector.click();
        });

        step("Is RU page opened", () -> {
            String url = url();
            assertThat(url).isEqualTo(BASE_URL);
        });
    }

    @Test
    @Description("Soon to be implemented by you (or QA.GURU engineers)")
    @DisplayName("Check right and left arrows")
    void generatedTest4() {

        final String header = "Экспертное мнение";
        final String firstPerson = "Ирина Кононова";

        step("Open " + BASE_URL, () -> {
            open(BASE_URL);
        });

        step("Check that \"Ирина Кононова\" is shown", () -> {
            $$("h2")
                    .filterBy(Condition.text(header))
                    .first()
                    .sibling(0).scrollTo()
                    .shouldHave(Condition.text(firstPerson));
        });

        step("Right arrow click", () -> {
            $(".icon-arrow-right").click();
            sleep(1000);
        });

        step("Check that " + firstPerson + " is not shown", () -> {
            $$("h2")
                    .filterBy(Condition.text(header))
                    .first()
                    .sibling(0).scrollTo()
                    .shouldNotHave(Condition.text(firstPerson));
        });

        step("Left arrow click", () -> {
            $(".icon-arrow-left").click();
        });

        step("Check that " + firstPerson + " is shown again", () -> {
            $$("h2")
                    .filterBy(Condition.text(header))
                    .first()
                    .sibling(0).scrollTo()
                    .shouldHave(Condition.text(firstPerson));
        });


    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page title should have header text")
    void titleTest() {
        step("Open url " + BASE_URL, () ->
                open(BASE_URL));

        step("Page title should have text 'РТ МИС. Сервисы для врачей и пациентов'", () -> {
            String expectedTitle = "РТ МИС. Сервисы для врачей и пациентов";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url " + BASE_URL, () ->
                open(BASE_URL));

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }
}